package morse;

import java.util.Dictionary;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'pau' at '1/15/16 8:50 PM' with Gradle 2.8
 *
 * @author pau, @date 1/15/16 8:50 PM
 */
public class MorseDecoder {

    //private static String text = ".--..-..-.-.-----.-----....--...-.-.-..-....--.-......----.";
    private static String text = ".--..-..-.-.-----";

    private static int MAX_LENGTH = 4;
    private static Map<String,String> codes;
    public static void main(String[] args){
        codes = createCodes();
        generateItem(0,1,"");
    }

    private static boolean generateItem(int index, int length, String path){
        boolean outOfBounds = index+length > text.length();
        boolean maxLength = length > MAX_LENGTH;

        if (!outOfBounds && !maxLength)
        {
            String item = text.substring(index, index + length);
            if (!codes.containsKey(item))
            {
                return false;
            }
            String decodedItem = codes.get(item);
            //System.out.println(String.format("\ri:%s, l:%s, item:%s, decoded:%s",index,length,item, path));
            if (!generateItem(index + length, 1, path.concat(decodedItem)))
            {
                return generateItem(index,length + 1, path.concat(decodedItem));
            }
            else
            {
                return true;
            }

        }
        else
        {
            System.out.println(path);
            //System.out.println(String.format("\ri:%s, l:%s, item:%s",index,length,null));
            return false;
        }
    }

    private static Map<String,String> createCodes()
    {
        Map<String,String> codes = new HashMap<>();
        codes.put(".-","A");
        codes.put("-...","B");
        codes.put("-.-.","C");
        codes.put("-..","D");
        codes.put(".","E");
        codes.put("..-.","F");
        codes.put("--.","G");
        codes.put("....","H");
        codes.put("..","I");
        codes.put(".---","J");
        codes.put("-.-","K");
        codes.put(".-..","L");
        codes.put("--","M");

        codes.put("-.","N");
        codes.put("---","O");
        codes.put(".--.","P");
        codes.put("--.-","Q");
        codes.put(".-.","R");
        codes.put("...","S");
        codes.put("-","T");
        codes.put("..-","U");
        codes.put("...-","V");
        codes.put(".--","W");
        codes.put("-..-","X");
        codes.put("-.--","Y");
        codes.put("--..","Z");
        return codes;
    }

}